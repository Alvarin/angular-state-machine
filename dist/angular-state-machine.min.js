/**
 * AngularJS service to implement a simple finite state machine.
 * @version v0.2.0 - 2015-02-06
 * @link https://github.com/tafax/angular-state-machine
 * @author Matteo Tafani Alunno <matteo.tafanialunno@gmail.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";function MachineConfiguration(a){var b={},c=[],d={};this.getStates=function(){return b},this.getMessages=function(){return c},this.getTransitions=function(){return d},this.extend=function(b){a=Object.merge(a,b)},this.configure=function(){if(!a.hasOwnProperty("init"))throw"You have to create 'init' state.";for(var e in a)if(a.hasOwnProperty(e)){var f=a[e];f.name=e;var g={};if(f.hasOwnProperty("transitions")){g=f.transitions;for(var h in g)g.hasOwnProperty(h)&&c.indexOf(h)<0&&c.push(h);delete f.transitions}d.hasOwnProperty(e)||(d[e]={}),angular.extend(d[e],g),b.hasOwnProperty(e)||(b[e]={}),angular.extend(b[e],f)}}}function StateMachine(a,b,c){this.initialize=function(){b.initialize(c)},this.getStates=function(){return b.getStates(c)},this.getMessages=function(){return b.getMessages(c)},this.hasMessage=function(a){return b.hasMessage(c,a)},this.isAvailable=function(a){return b.isAvailable(c,a)},this.available=function(){return b.available(c)},this.send=function(d,e){b.send(a,c,d,e)}}function AsyncStrategy(a,b,c){SyncStrategy.call(this),this.json=a,this.http=b,this.q=c,this.promise=null}function MachineStrategy(){}function SyncStrategy(){MachineStrategy.call(this),this.current=null}Object.merge=function(a,b){var c={};for(var d in a)c[d]=a[d],d in b&&"object"==typeof a[d]&&null!==d&&(c[d]=Object.merge(a[d],b[d]));for(var e in b)e in c||(c[e]=b[e]);return c};var FSM=angular.module("FSM",[]);FSM.provider("stateMachine",function(){var a,b;this.config=function(a){b=a},this.load=function(b){a=b},this.$get=["$injector","$http","$q",function(c,d,e){var f=a?new AsyncStrategy(a,d,e):new SyncStrategy;return new StateMachine(c,f,new MachineConfiguration(b))}]}),AsyncStrategy.prototype=new SyncStrategy,AsyncStrategy.prototype.initialize=function(a){this.promise=this.http({method:"GET",url:this.json}).then(function(b){a.extend(b.data),SyncStrategy.prototype.initialize(a)},function(a){throw"Unable to load '"+json+"'. The server responds with status "+a.status+"."})},AsyncStrategy.prototype.getStates=function(a){if(null!==this.promise){var b=this.q.defer();return this.promise.then(function(){b.resolve(SyncStrategy.prototype.getStates(a))}),b.promise}throw"You have to initialize the machine."},AsyncStrategy.prototype.getMessages=function(a){if(null!==this.promise){var b=this.q.defer();return this.promise.then(function(){b.resolve(SyncStrategy.prototype.getMessages(a))}),b.promise}throw"You have to initialize the machine."},AsyncStrategy.prototype.hasMessage=function(a,b){if(null!==this.promise){var c=this.q.defer();return this.promise.then(function(){c.resolve(SyncStrategy.prototype.hasMessage(a,b))}),c.promise}throw"You have to initialize the machine."},AsyncStrategy.prototype.isAvailable=function(a,b){if(null!==this.promise){var c=this.q.defer();return this.promise.then(function(){c.resolve(SyncStrategy.prototype.isAvailable(a,b))}),c.promise}throw"You have to initialize the machine."},AsyncStrategy.prototype.available=function(a){if(null!==this.promise){var b=this.q.defer();return this.promise.then(function(){b.resolve(SyncStrategy.prototype.available(a))}),b.promise}throw"You have to initialize the machine."},AsyncStrategy.prototype.send=function(a,b,c,d){if(null!==this.promise){var e=this.q.defer();return this.promise.then(function(){e.resolve(SyncStrategy.prototype.send(a,b,c,d))}),e.promise}throw"You have to initialize the machine."},MachineStrategy.prototype.initialize=function(){},MachineStrategy.prototype.getStates=function(){},MachineStrategy.prototype.getMessages=function(){},MachineStrategy.prototype.hasMessage=function(){},MachineStrategy.prototype.isAvailable=function(){},MachineStrategy.prototype.available=function(){},MachineStrategy.prototype.send=function(){},MachineStrategy.prototype=new MachineStrategy,SyncStrategy.prototype.initialize=function(a){a.configure();var b=a.getStates();this.current=b.init,this.current.params={}},SyncStrategy.prototype.getStates=function(a){return Object.keys(a.getStates())},SyncStrategy.prototype.getMessages=function(a){return a.getMessages()},SyncStrategy.prototype.hasMessage=function(a,b){var c=a.getMessages();return c.indexOf(b)>=0},SyncStrategy.prototype.isAvailable=function(a,b){var c=a.getTransitions(),d=c[this.current.name];return d.hasOwnProperty(b)},SyncStrategy.prototype.available=function(a){var b=a.getTransitions(),c=b[this.current.name];return Object.keys(c)},SyncStrategy.prototype.send=function(a,b,c,d){if(this.hasMessage(b,c)&&this.isAvailable(b,c)){var e=b.getTransitions(),f=e[this.current.name],g=f[c];if(g instanceof Array){var h=[];for(var i in g){var j=g[i];a.invoke(j.predicate,this,this.current)&&h.push(j.to)}if(h.length>1)throw"Unable to execute transition in state '"+this.current.name+"'. More than one predicate is passed.";g=h[0]}var k=b.getStates(),l=k[g],m={};m=Object.merge(m,this.current),d&&(m.params=Object.merge(m.params,d));var n=a.invoke(l.action,this,m);!n&&this.current.params?l.params=this.current.params:(l.hasOwnProperty("params")||(l.params={}),l.params=Object.merge(l.params,n)),this.current=l}};